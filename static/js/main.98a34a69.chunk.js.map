{"version":3,"sources":["components/Header.js","helpers/Utils.js","components/WeatherCard.js","components/Forecast.js","App.js","index.js"],"names":["Header","className","helpers","getWeatherIcon","icon","faSmog","size","color","faBolt","faCloudRain","faSnowman","faSun","faCloud","WeatherCard","weather","city","moment","format","utils","Math","floor","temperature","humidity","Date","sunrise","toLocaleTimeString","sunset","Forecast","forecast","class","Card","Group","itemsPerRow","map","data","Content","unix","dt","round","temp","max","min","Meta","Description","main","URL","process","API_KEY","App","useState","coords","setCoords","setWeather","setForecast","loading","setLoading","query","setQuery","setWeatherState","weatherData","sys","name","axios","get","coord","lat","lon","then","daily","catch","error","getWeatherInfo","cityValue","navigator","geolocation","getCurrentPosition","position","latitude","longitude","useEffect","search","evt","key","type","Input","Icon","link","onClick","placeholder","onChange","e","target","value","onKeyPress","Loader","active","inline","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.98a34a69.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Header() {\r\n    return (\r\n        <div className=\"app-header\">\r\n            React Weather Application\r\n        </div>\r\n    )\r\n}","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faBolt, faCloud, faCloudRain, faSmog, faSnowman, faSun } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst helpers = {\r\n    getWeatherIcon: (icon) => {\r\n        const icons = {\r\n            \"Haze\": <FontAwesomeIcon icon={faSmog} size=\"lg\" color=\"white\"/>,\r\n            \"Thunderstorm\": <FontAwesomeIcon icon={faBolt} size=\"lg\" color=\"white\"/>,\r\n            \"Drizzle\": <FontAwesomeIcon icon={faCloudRain} size=\"lg\" color=\"white\"/>,\r\n            \"Rain\": <FontAwesomeIcon icon={faCloudRain} size=\"lg\" color=\"white\"/>,\r\n            \"Snow\": <FontAwesomeIcon icon={faSnowman} size=\"lg\" color=\"white\"/>,\r\n            \"Mist\": <FontAwesomeIcon icon={faSmog} size=\"lg\" color=\"white\"/>,\r\n            \"Clear\": <FontAwesomeIcon icon={faSun} size=\"lg\" color=\"white\"/>,\r\n            \"Clouds\": <FontAwesomeIcon icon={faCloud} size=\"lg\" color=\"white\"/>,\r\n        }\r\n        return icons[icon]    \r\n    }\r\n}\r\n\r\n\r\n\r\nexport default helpers","import React from 'react'\r\nimport moment from 'moment'\r\nimport utils from '../helpers/Utils'\r\n\r\n\r\nexport default function WeatherCard({weather}) {\r\n  return (\r\n    <div className=\"weather-card-main\">\r\n      <div className=\"weather-info\">\r\n        <div className=\"weather-city\">{weather.city}</div>\r\n        <h5 className=\"weather-date\">{moment().format('MMMM Do YYYY, h:mm a')}</h5>\r\n        <div className=\"icon-container\">{utils.getWeatherIcon(weather.icon)}</div>\r\n      </div>\r\n      <div className=\"weather-detail\">\r\n          <div className=\"weather-temperature\">\r\n            <p>Temperature</p>\r\n            {Math.floor(weather.temperature)} ℃               \r\n          </div>\r\n          <div className=\"weather-humidity\">\r\n            <p>Humidity</p>\r\n            {weather.humidity} %\r\n          </div>\r\n          <div className=\"weather-sunrise\">\r\n            <p>Sunrise</p>\r\n            {new Date(weather.sunrise*1000).toLocaleTimeString('en-IN')}\r\n          </div>\r\n          <div className=\"weather-sunset\">\r\n            <p>Sunset</p>\r\n            {new Date(weather.sunset*1000).toLocaleTimeString('en-IN')}\r\n          </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { Card } from 'semantic-ui-react';\r\nimport moment from 'moment';\r\nimport utils from '../helpers/Utils'\r\n\r\nexport default function Forecast({ forecast }) {\r\n    return (\r\n        <div class=\"forecast\">\r\n            <Card.Group itemsPerRow={8} className=\"forecast\">\r\n                {forecast.map((data) => {\r\n                    return (\r\n                        <Card className=\"forecast-card\">\r\n                            <Card.Content>\r\n                                <Card.Header className=\"forecast-content\">\r\n                                    {moment.unix(data.dt).format('DD.MM')}\r\n                                </Card.Header>\r\n                                <Card.Header className=\"forecast-content\">\r\n                                    {Math.round((data.temp.max + data.temp.min) / 2)} ℃\r\n                                </Card.Header>\r\n                                <Card.Meta className=\"forecast-content\">\r\n                                    {data.humidity} %\r\n                                </Card.Meta>\r\n                                <Card.Description className=\"forecast-content\">\r\n                                    {utils.getWeatherIcon(data.weather[0].main)}\r\n                                </Card.Description>\r\n                            </Card.Content>\r\n                        </Card>\r\n                    )\r\n                })}\r\n            </Card.Group>\r\n        </div>\r\n    )\r\n}","import axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Header from \"./components/Header\";\r\nimport WeatherCard from \"./components/WeatherCard\";\r\nimport Forecast from \"./components/Forecast\";\r\nimport { Loader } from \"semantic-ui-react\";\r\nimport { Icon, Input } from \"semantic-ui-react\";\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n\r\nconst URL = process.env.REACT_APP_API_URL;\r\nconst API_KEY = process.env.REACT_APP_API_KEY;\r\n\r\nfunction App() {\r\n  const [coords, setCoords] = useState(null);\r\n  const [weather, setWeather] = useState(null);\r\n  const [forecast, setForecast] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [query, setQuery] = useState(\"\");\r\n\r\n  const getCoords = () => {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      setCoords({\r\n        ...coords,\r\n        latitude: position.coords.latitude,\r\n        longitude: position.coords.longitude,\r\n      });\r\n    });\r\n  };\r\n\r\n  const setWeatherState = (weatherData) => {\r\n    setWeather({\r\n      ...weather,\r\n      temperature: weatherData.data.main.temp,\r\n      sunset: weatherData.data.sys.sunset,\r\n      sunrise: weatherData.data.sys.sunrise,\r\n      humidity: weatherData.data.main.humidity,\r\n      city: weatherData.data.name,\r\n      icon: weatherData.data.weather[0].main,\r\n    });\r\n    setLoading(false);\r\n\r\n    axios\r\n      .get(\r\n        `${URL}/onecall?lat=${weatherData.data.coord.lat}&lon=${weatherData.data.coord.lon}&units=metric&exclude=hourly,minutely&appid=${API_KEY}`\r\n      )\r\n      .then((weatherData) => {\r\n        setForecast(weatherData.data.daily);\r\n      })\r\n      .catch((error) => {});\r\n  };\r\n\r\n  const getWeatherInfo = (cityValue) => {\r\n    if (cityValue) {\r\n      axios\r\n        .get(\r\n          `${URL}/weather?q=${cityValue}&units=metric&exclude=hourly,minutely&appid=${API_KEY}`\r\n        )\r\n        .then((weatherData) => {\r\n          setWeatherState(weatherData);\r\n        })\r\n        .catch((error) => {});\r\n    } else {\r\n      getCoords();\r\n      if (coords !== null && weather === null) {\r\n        axios\r\n          .get(\r\n            `${URL}/weather?lat=${coords.latitude}&lon=${coords.longitude}&units=metric&exclude=hourly,minutely&appid=${API_KEY}`\r\n          )\r\n          .then((weatherData) => {\r\n            setWeatherState(weatherData);\r\n          })\r\n          .catch((error) => {});\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getWeatherInfo();\r\n  }, [coords, weather]);\r\n\r\n  const search = (evt) => {\r\n    if (evt.key === \"Enter\" || evt.type === \"click\") {\r\n      getWeatherInfo(query);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <Header />\r\n\r\n      <div>\r\n        <Input\r\n          icon={<Icon name=\"search\" className=\"icon\" link onClick={search} />}\r\n          placeholder=\"City...\"\r\n          onChange={(e) => setQuery(e.target.value)}\r\n          value={query}\r\n          onKeyPress={search}\r\n        />\r\n        <br />\r\n        <br />\r\n      </div>\r\n      {loading ? (\r\n        <div>\r\n          <p>Loading...</p>\r\n          <Loader active inline=\"centered\" />\r\n        </div>\r\n      ) : (\r\n        <WeatherCard weather={weather} />\r\n      )}\r\n      <Forecast forecast={forecast} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}