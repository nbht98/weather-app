{"version":3,"sources":["components/Header.js","helpers/Utils.js","components/WeatherCard.js","components/Forecast.js","App.js","index.js"],"names":["Header","className","helpers","getWeatherIcon","icon","faSmog","size","color","faBolt","faCloudRain","faSnowman","faSun","faCloud","WeatherCard","temperature","city","sunrise","sunset","humidity","moment","format","utils","Math","floor","Date","toLocaleTimeString","Forecast","forecast","class","Card","Group","itemsPerRow","map","data","Content","unix","dt","round","temp","max","min","Meta","Description","weather","main","URL","process","API_KEY","App","useState","latitude","setLatitude","longitude","setLongitude","setCity","setTemperature","setHumidity","setSunrise","setSunset","setIcon","setForecast","loading","setLoading","query","setQuery","setWeatherState","weatherData","sys","name","coord","lat","lon","getWeatherInfo","cityValue","axios","get","then","catch","error","alert","navigator","geolocation","getCurrentPosition","position","coords","daily","useEffect","search","evt","key","type","Input","Icon","link","onClick","placeholder","onChange","e","target","value","onKeyPress","Loader","active","inline","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fc19443e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Header() {\r\n    return (\r\n        <div className=\"app-header\">\r\n            React Weather Application\r\n        </div>\r\n    )\r\n}","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faBolt, faCloud, faCloudRain, faSmog, faSnowman, faSun } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst helpers = {\r\n    getWeatherIcon: (icon) => {\r\n        const icons = {\r\n            \"Haze\": <FontAwesomeIcon icon={faSmog} size=\"lg\" color=\"white\"/>,\r\n            \"Thunderstorm\": <FontAwesomeIcon icon={faBolt} size=\"lg\" color=\"white\"/>,\r\n            \"Drizzle\": <FontAwesomeIcon icon={faCloudRain} size=\"lg\" color=\"white\"/>,\r\n            \"Rain\": <FontAwesomeIcon icon={faCloudRain} size=\"lg\" color=\"white\"/>,\r\n            \"Snow\": <FontAwesomeIcon icon={faSnowman} size=\"lg\" color=\"white\"/>,\r\n            \"Mist\": <FontAwesomeIcon icon={faSmog} size=\"lg\" color=\"white\"/>,\r\n            \"Clear\": <FontAwesomeIcon icon={faSun} size=\"lg\" color=\"white\"/>,\r\n            \"Clouds\": <FontAwesomeIcon icon={faCloud} size=\"lg\" color=\"white\"/>,\r\n        }\r\n        return icons[icon]    \r\n    }\r\n}\r\n\r\n\r\n\r\nexport default helpers","import React from 'react'\r\nimport moment from 'moment'\r\nimport utils from '../helpers/Utils'\r\n\r\n\r\nexport default function WeatherCard({temperature, city, sunrise, sunset, humidity, icon}) {\r\n  return (\r\n    <div className=\"weather-card-main\">\r\n      <div className=\"weather-info\">\r\n        <div className=\"weather-city\">{city}</div>\r\n        <h5 className=\"weather-date\">{moment().format('MMMM Do YYYY, h:mm a')}</h5>\r\n        <div className=\"icon-container\">{utils.getWeatherIcon(icon)}</div>\r\n      </div>\r\n      <div className=\"weather-detail\">\r\n          <div className=\"weather-temperature\">\r\n            <p>Temperature</p>\r\n            {Math.floor(temperature)} ℃               \r\n          </div>\r\n          <div className=\"weather-humidity\">\r\n            <p>Humidity</p>\r\n            {humidity} %\r\n          </div>\r\n          <div className=\"weather-sunrise\">\r\n            <p>Sunrise</p>\r\n            {new Date(sunrise*1000).toLocaleTimeString('en-IN')}\r\n          </div>\r\n          <div className=\"weather-sunset\">\r\n            <p>Sunset</p>\r\n            {new Date(sunset*1000).toLocaleTimeString('en-IN')}\r\n          </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { Card } from 'semantic-ui-react';\r\nimport moment from 'moment';\r\nimport utils from '../helpers/Utils'\r\n\r\nexport default function Forecast({ forecast }) {\r\n    return (\r\n        <div class=\"forecast\">\r\n            <Card.Group itemsPerRow={8} className=\"forecast\">\r\n                {forecast.map((data) => {\r\n                    return (\r\n                        <Card className=\"forecast-card\">\r\n                            <Card.Content>\r\n                                <Card.Header className=\"forecast-content\">\r\n                                    {moment.unix(data.dt).format('DD.MM')}\r\n                                </Card.Header>\r\n                                <Card.Header className=\"forecast-content\">\r\n                                    {Math.round((data.temp.max + data.temp.min) / 2)} ℃\r\n                                </Card.Header>\r\n                                <Card.Meta className=\"forecast-content\">\r\n                                    {data.humidity} %\r\n                                </Card.Meta>\r\n                                <Card.Description className=\"forecast-content\">\r\n                                    {utils.getWeatherIcon(data.weather[0].main)}\r\n                                </Card.Description>\r\n                            </Card.Content>\r\n                        </Card>\r\n                    )\r\n                })}\r\n            </Card.Group>\r\n        </div>\r\n    )\r\n}","import axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Header from \"./components/Header\";\r\nimport WeatherCard from \"./components/WeatherCard\";\r\nimport Forecast from \"./components/Forecast\";\r\nimport { Loader } from \"semantic-ui-react\";\r\nimport { Icon, Input } from \"semantic-ui-react\";\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n\r\nconst URL = process.env.REACT_APP_API_URL;\r\nconst API_KEY = process.env.REACT_APP_API_KEY;\r\n\r\nfunction App() {\r\n  const [latitude, setLatitude] = useState(null);\r\n  const [longitude, setLongitude] = useState(null);\r\n  const [city, setCity] = useState(\"\");\r\n  const [temperature, setTemperature] = useState(null);\r\n  const [humidity, setHumidity] = useState(null);\r\n  const [sunrise, setSunrise] = useState(null);\r\n  const [sunset, setSunset] = useState(null);\r\n  const [icon, setIcon] = useState(\"\");\r\n  const [forecast, setForecast] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [query, setQuery] = useState(\"\");\r\n\r\n  const getCoords = () => {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      setLatitude(position.coords.latitude);\r\n      setLongitude(position.coords.longitude);\r\n    });\r\n  };\r\n\r\n  const setWeatherState = (weatherData) => {\r\n    setLoading(false);\r\n    setTemperature(weatherData.data.main.temp);\r\n    setSunset(weatherData.data.sys.sunset);\r\n    setSunrise(weatherData.data.sys.sunrise);\r\n    setHumidity(weatherData.data.main.humidity);\r\n    setCity(weatherData.data.name);\r\n    setIcon(weatherData.data.weather[0].main);\r\n    setLatitude(weatherData.data.coord.lat);\r\n    setLongitude(weatherData.data.coord.lon);\r\n  };\r\n\r\n  const getWeatherInfo = (cityValue) => {\r\n    // if (latitude !== null && longitude !== null) {\r\n    //   return;\r\n    // }\r\n\r\n    if (cityValue) {\r\n      axios\r\n        .get(\r\n          `${URL}/weather?q=${cityValue}&units=metric&exclude=hourly,minutely&appid=${API_KEY}`\r\n        )\r\n        .then((weatherData) => {\r\n          setWeatherState(weatherData);\r\n        })\r\n        .catch((error) => {\r\n          alert(error)\r\n        });\r\n    } else if (latitude === null || longitude === null){\r\n      getCoords();\r\n\r\n      axios\r\n        .get(\r\n          `${URL}/weather?lat=${latitude}&lon=${longitude}&units=metric&exclude=hourly,minutely&appid=${API_KEY}`\r\n        )\r\n        .then((weatherData) => {\r\n          setWeatherState(weatherData);\r\n        })\r\n        .catch((error) => {\r\n          alert(error)\r\n        });\r\n    }\r\n\r\n    axios\r\n      .get(\r\n        `${URL}/onecall?lat=${latitude}&lon=${longitude}&units=metric&exclude=hourly,minutely&appid=${API_KEY}`\r\n      )\r\n      .then((weatherData) => {\r\n        setForecast(weatherData.data.daily);\r\n      })\r\n      .catch((error) => {\r\n        alert(error)\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getWeatherInfo();\r\n  }, [latitude, longitude]);\r\n\r\n  const search = (evt) => {\r\n    if (evt.key === \"Enter\" || evt.type === \"click\") {\r\n      getWeatherInfo(query);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <Header />\r\n\r\n      <div>\r\n        <Input\r\n          icon={<Icon name=\"search\" link onClick={search} />}\r\n          placeholder=\"City...\"\r\n          onChange={(e) => setQuery(e.target.value)}\r\n          value={query}\r\n          onKeyPress={search}\r\n        />\r\n        <br />\r\n        <br />\r\n      </div>\r\n      {loading ? (\r\n        <div>\r\n          <p>Loading...</p>\r\n          <Loader active inline=\"centered\" />\r\n        </div>\r\n      ) : (\r\n        <WeatherCard\r\n          temperature={temperature}\r\n          sunset={sunset}\r\n          sunrise={sunrise}\r\n          humidity={humidity}\r\n          city={city}\r\n          icon={icon}\r\n        />\r\n      )}\r\n      <Forecast forecast={forecast} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}